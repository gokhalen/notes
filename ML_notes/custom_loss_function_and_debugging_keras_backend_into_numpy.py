# -*- coding: utf-8 -*-
"""Artificial Neural Network

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eje9zILprgVmohMN7cKykI3fn4FBRPnF

# Artificial Neural Network

### Importing the libraries
"""

import numpy as np
import pandas as pd
import tensorflow as tf

import tensorflow.keras.backend as K

import sys

tf.config.experimental_run_functions_eagerly(True)
# tf.config.run_functions_eagerly(True)


tf.__version__

def custom_loss(y_true,y_pred):
# Loss function must make use of y_pred value while calculating the loss,
# if you do not do so, then gradient expression will not be defined and you will get an error.    
# https://towardsdatascience.com/how-to-create-a-custom-loss-function-keras-3a89156ec69b
  loss = K.square(y_pred - y_true)
  loss = K.sum(loss,axis=1)
# at the following breakpoint you can use loss.numpy(),y_pred.numpy(),y_true.numpy()
# this requires tf.config.run_functions_eagerly(True) in TF 2.3.x or 
# tf.config.run_functions_eagerly(True)
# and (....run_eagerly=True) in ann.compile
  breakpoint()
  return loss


"""## Part 1 - Data Preprocessing

### Importing the dataset
"""

dataset = pd.read_excel('Folds5x2_pp.xlsx')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values


"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)


"""## Part 2 - Building the ANN

### Initializing the ANN
"""

ann = tf.keras.models.Sequential()

"""### Adding the input layer and the first hidden layer"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""### Adding the second hidden layer"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""### Adding the output layer"""

# what is the activation for this layer - nhg
ann.add(tf.keras.layers.Dense(units=1))

"""## Part 3 - Training the ANN

### Compiling the ANN
"""

# ann.compile(optimizer = 'adam', loss = 'mean_squared_error')
ann.compile(optimizer = 'adam', loss = custom_loss, run_eagerly=True)
"""### Training the ANN model on the Training set"""

ann.fit(X_train, y_train, batch_size = 32, epochs = 100)

"""### Predicting the results of the Test set"""

y_pred = ann.predict(X_test)
np.set_printoptions(precision=2)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))
